{
  "openapi": "3.0.3",
  "info": {
    "title": "Sample API with Enums",
    "description": "API demonstrating enum generation with custom templates",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.example.com/v1",
      "description": "Production server"
    }
  ],
  "paths": {
    "/orders": {
      "get": {
        "summary": "Get orders",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/OrderStatus"
            },
            "description": "Filter by order status"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create new order",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Order created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "summary": "Get users",
        "parameters": [
          {
            "name": "role",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/UserRole"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Order": {
        "type": "object",
        "required": [
          "id",
          "status",
          "priority"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "$ref": "#/components/schemas/OrderStatus"
          },
          "priority": {
            "$ref": "#/components/schemas/OrderPriority"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "User": {
        "type": "object",
        "required": [
          "id",
          "role"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "role": {
            "$ref": "#/components/schemas/UserRole"
          },
          "department": {
            "$ref": "#/components/schemas/Department"
          }
        }
      },
      "OrderStatus": {
        "type": "string",
        "description": "The status of an order",
        "enum": [
          "PENDING",
          "CONFIRMED",
          "PROCESSING",
          "SHIPPED",
          "DELIVERED",
          "CANCELLED"
        ],
        "example": "PENDING"
      },
      "OrderPriority": {
        "type": "string",
        "description": "Order priority levels",
        "enum": [
          "LOW",
          "MEDIUM",
          "HIGH",
          "URGENT"
        ],
        "example": "MEDIUM"
      },
      "UserRole": {
        "type": "string",
        "description": "User roles in the system",
        "enum": [
          "ADMIN",
          "MANAGER",
          "USER",
          "GUEST"
        ],
        "example": "USER"
      },
      "Department": {
        "type": "string",
        "description": "Company departments",
        "enum": [
          "SALES",
          "MARKETING",
          "ENGINEERING",
          "HR",
          "FINANCE"
        ],
        "nullable": true,
        "example": "ENGINEERING"
      },
      "ErrorCode": {
        "type": "string",
        "description": "Standard error codes",
        "enum": [
          "VALIDATION_ERROR",
          "AUTHENTICATION_ERROR",
          "AUTHORIZATION_ERROR",
          "NOT_FOUND",
          "INTERNAL_ERROR"
        ]
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object"
          },
          "error": {
            "$ref": "#/components/schemas/ApiError"
          }
        }
      },
      "ApiError": {
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "object"
          }
        }
      }
    },
    "parameters": {
      "PageSize": {
        "name": "pageSize",
        "in": "query",
        "description": "Number of items per page",
        "required": false,
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 100,
          "default": 20
        }
      }
    },
    "responses": {
      "NotFound": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      }
    }
  }
}